---
import { ViewTransitions } from 'astro:transitions';
import { Picture } from 'astro:assets';
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import RichBody from '../components/RichBody.astro';
import Giscus from '../components/Giscus';
export interface Props {
	title: string;
	description: string;
	pubDate?: string;
	updatedDate?: string;
	heroImage?: {
		url:string,
		width?: number;
		height?:number
	};
	tags?: string[]
}

const {
	title, description, pubDate, updatedDate, heroImage,tags
} = Astro.props;
const maxWidth = 1000
const imgRatio = heroImage?.width &&  heroImage?.height ?  heroImage.width /  heroImage.height : undefined;
const imgW = heroImage?.width ? Math.min(maxWidth, heroImage.width) : undefined
const imgH = heroImage?.height ?  imgRatio ? imgW / imgRatio :  heroImage.height: undefined
---

<html>
	<head>
		<BaseHead 
			title={title} 
			description={description} 
			image={heroImage?.url??''} 
			imageWidth={imgW} 
			imageHeight={imgH}
			tags={tags}
		/>
		<style>
			.title {
				font-size: 2em;
				margin: 0.25em 0 0;
			}
			hr {
				border-top: 1px solid #DDD;
				margin: 1rem 0;
			}

			.comment {
				margin-top:40px;

			}
			

	
		</style>
		<style is:global>
		

			.post iframe {
				width: 120ch;
				/* max-width: 80vw; */
				margin-left: calc((65ch - 120ch)/2);
				height: 600px;
				/* max-height: 600px; */
				border: 1px solid rgba(0, 0, 0, 0.1);
				box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
				margin-top: 10px;
			}	
			.post .iframe-box {
				position: relative;
				z-index: 1;
			}
			.post .hide-sb-box pre {
				display: unset;
			}
			.post .hide-sb-box.hide pre {
				display: none;
			}

			.post .hide-sb-btn {
				background: transparent;
				border: 1px solid #eee;
				border-radius: 6px;
				padding-top: 0px 6px;
				line-height: 26px;
				color: #333;
				cursor: pointer;

			}
			.post .hide-sb-btn:hover {
				background: rgba(0, 0, 0, 0.01);
			}


			@media screen and (max-width: 1400px) {
				.post iframe {
					margin-left: calc((65ch - 80vw)/2);
					width: 80vw;
					height: 500px;
				}
			}
			@media screen and (max-width: 1000px) {
				.post iframe {
					margin-left: unset;
					width: 100%;
					height: 360px;
				}
			}
		</style>
		<ViewTransitions />
	</head>
	<RichBody>
		<Header />
		<main>
			<article class="post" id="article-box">
				{heroImage?.url ? imgW && imgH ? 
				(
					<Picture 
						width={imgW}
						height={imgH}
						src={heroImage.url} 
						formats={['avif', 'webp']}
						alt='' 
					/>
				)
					: 
				(
					<img
						width={imgW}
						height={imgH}
						src={heroImage?.url}
						alt=""
					/>
				):null}
				<h1 class="title">{title}</h1>
				{pubDate && <time style="font-size:14px">{pubDate}</time>}
				{updatedDate && <div style="font-size:14px">Last updated on <time>{updatedDate}</time></div>}
				<hr/>
				<slot />
			</article>
			<section class="comment">
				<Giscus client:load />
			</section>
		</main>
		<Footer />

	</RichBody>
</html>
<script>
	import copy from 'copy-to-clipboard';
	// Find our component DOM on the page.
	const buttons = document.querySelectorAll('[data-cp-button]');
	// Add event listeners to fire confetti when a button is clicked.
	buttons.forEach((button) => {
		// button.setAttribute('style','display: block;')
		button.classList.add('on') 
		button.addEventListener('click', () => {
			copy(button.getAttribute('data-code'))
		});
	});

	// Processed! Bundled! TypeScript-supported!
	// Importing local scripts and Node modules works.
	// const iframeBoxs  = document.querySelectorAll('div.iframe-box');
	// console.log('--iframeBoxs',iframeBoxs)

	// const hideSbBtns  = document.querySelectorAll('div.hide-sb-btn');
	// console.log('--hideSbBtns',hideSbBtns)
	document.getElementById('article-box')?.addEventListener('click',function(e) {
	if(e.target.dataset.btn === 'hideSb') {
		if(e.target.closest('div').dataset.btnBox="hideSb") {
			e.target.innerHTML = e.target.closest('div').classList.contains('hide') ? 'hide code':'show code'
			e.target.closest('div').classList.toggle('hide')
		}
	}
	})
</script>